diff --git a/defs.h b/defs.h
index 82fb982..3b4ee4b 100644
--- a/defs.h
+++ b/defs.h
@@ -80,6 +80,7 @@ void            lapiceoi(void);
 void            lapicinit(void);
 void            lapicstartap(uchar, uint);
 void            microdelay(int);
+void            setTimer(int);
 
 // log.c
 void            initlog(int dev);
@@ -120,6 +121,9 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int		          niceproc(int proc, int priority);
+void            updateStats(void);
+int             getStats(int *rTime, int *eTime, int *cTime, int *sTime);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/exec.c b/exec.c
index b40134f..7bc3653 100644
--- a/exec.c
+++ b/exec.c
@@ -99,6 +99,7 @@ exec(char *path, char **argv)
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+  curproc->priority = curproc->priority + 1;
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
diff --git a/lapic.c b/lapic.c
index b22bbd7..66eb53d 100644
--- a/lapic.c
+++ b/lapic.c
@@ -51,6 +51,10 @@ lapicw(int index, int value)
   lapic[ID];  // wait for write to finish, by reading
 }
 
+void setTimer(int p){.,
+  lapicw(TICR, 10000000*(p/2)); // cuz default is 10
+}
+
 void
 lapicinit(void)
 {
diff --git a/proc.c b/proc.c
index 806b1b1..e6e42b8 100644
--- a/proc.c
+++ b/proc.c
@@ -12,6 +12,12 @@ struct {
   struct proc proc[NPROC];
 } ptable;
 
+//typedef struct sched-stats{
+  //int nprocesses_scheduled;
+  //int nprocesses_completed;
+  //int time-lapsed;
+//} sched-stats;
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -112,6 +118,12 @@ found:
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
+  p->cTime = ticks; 
+  p->eTime = 0;
+  p->rTime = 0;
+  p->sTime = 0;
+  p->priority = 10;
+
   return p;
 }
 
@@ -262,6 +274,7 @@ exit(void)
   }
 
   // Jump into the scheduler, never to return.
+  curproc->eTime = ticks;
   curproc->state = ZOMBIE;
   sched();
   panic("zombie exit");
@@ -322,33 +335,44 @@ wait(void)
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *p, *p1;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+
+
   for(;;){
-    // Enable interrupts on this processor.
     sti();
 
-    // Loop over process table looking for process to run.
+    struct proc *maxs;
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
+      maxs = p;
+      for(p1 = ptable.proc; p1 < &ptable.proc[NPROC]; p1++){
+        if(p1->state != RUNNABLE)
+          continue;
+        if(maxs->priority > p1->priority)
+          maxs = p1;
+      }
+
+      setTimer(p->priority);
+      p = maxs;
       c->proc = p;
       switchuvm(p);
+      //p->lastTouched = ticks;
       p->state = RUNNING;
+      //cprintf("%d\n", p->state);
+
 
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
+      //p->rTime = p->rTime + (ticks - p->lastTouched );
+
       c->proc = 0;
+
     }
     release(&ptable.lock);
 
@@ -437,6 +461,7 @@ sleep(void *chan, struct spinlock *lk)
   }
   // Go to sleep.
   p->chan = chan;
+  //p->sTime = p->sTime + chan;
   p->state = SLEEPING;
 
   sched();
@@ -532,3 +557,94 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+
+int
+getStats(int *rTime, int *eTime, int *cTime, int *sTime)
+{
+
+  struct proc *p;
+  int havekids, pid;
+  struct proc *curproc = myproc();
+  
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != curproc)
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+
+        // Found one.
+        *rTime = p->rTime;
+        *cTime = p->cTime;
+        *sTime = p->sTime;
+        *eTime = p->eTime;
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+
+}
+
+int 
+niceproc(int proc, int priority)
+{
+  struct proc *p;
+  acquire(&ptable.lock);
+  int yieldF = 0;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == proc){
+      if (p->priority > priority)
+        yieldF = 1;
+      p->priority = priority;
+      break;
+    }
+  }
+
+  release(&ptable.lock);
+
+  if (yieldF)
+    yield();
+  return proc;
+}
+
+void 
+updateStats()
+{
+
+  for(struct proc *p = ptable.proc; p < &ptable.proc[NPROC]; ++p) 
+  {
+    if (p->state == RUNNING){
+      cprintf("LMAO A%d\n", p->state);
+      p->rTime = p->rTime + 1;
+    }
+
+    if (p->state == RUNNABLE){
+    }
+    if (p->state == SLEEPING){
+      p->sTime = p->sTime + 1;
+    }
+  }
+}
diff --git a/proc.h b/proc.h
index 1647114..72a3c28 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;                // Process Priority
+  int sTime;                   // sleep time
+  int cTime;                   // init time
+  int rTime;                   // run time 
+  int eTime;                   // terminate
+  int lastTouched;              //
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index ee85261..0d3a1ac 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_nice(void);
+extern int sys_getStats(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_nice]    sys_nice,
+[SYS_getStats]  sys_getStats
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..01fbd6e 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_nice   22
+#define SYS_getStats 23
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..5964e1b 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -357,9 +357,9 @@ sys_mknod(void)
 
   begin_op();
   if((argstr(0, &path)) < 0 ||
-     argint(1, &major) < 0 ||
-     argint(2, &minor) < 0 ||
-     (ip = create(path, T_DEV, major, minor)) == 0){
+    argint(1, &major) < 0 ||
+    argint(2, &minor) < 0 ||
+    (ip = create(path, T_DEV, major, minor)) == 0){
     end_op();
     return -1;
   }
@@ -374,7 +374,7 @@ sys_chdir(void)
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-  
+
   begin_op();
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
     end_op();
@@ -442,3 +442,25 @@ sys_pipe(void)
   fd[1] = fd1;
   return 0;
 }
+
+int
+sys_nice(void)
+{
+  int proc;
+  int priority;
+  if (argint(0, &proc) < 0 || argint(1, &priority) < 0)
+    return -1;
+
+  return niceproc(proc, priority);
+}
+
+int 
+sys_getStats(void)
+{
+	int *rTime, *eTime, *cTime, *sTime;
+
+	if (argptr(0, (char **)&rTime, sizeof(int)) < 0 || argptr(1, (char **)&eTime, sizeof(int)) < 0 || argptr(2, (char **)&cTime, sizeof(int)) < 0 || argptr(3, (char **)&sTime, sizeof(int)) < 0){
+	return -1;
+	}
+	return getStats(rTime, eTime, cTime, sTime);
+}
diff --git a/trap.c b/trap.c
index 41c66eb..9d3114a 100644
--- a/trap.c
+++ b/trap.c
@@ -53,6 +53,7 @@ trap(struct trapframe *tf)
       ticks++;
       wakeup(&ticks);
       release(&tickslock);
+      updateStats();
     }
     lapiceoi();
     break;
diff --git a/user.h b/user.h
index 4f99c52..ed01c93 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int nice(int, int);
+int getStats(int*, int*, int*, int*);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -37,3 +39,4 @@ void* memset(void*, int, uint);
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+int niceproc(int, int);
diff --git a/usertests.c b/usertests.c
index a1e97e7..eb41e6a 100644
--- a/usertests.c
+++ b/usertests.c
@@ -1745,6 +1745,63 @@ rand()
   return randstate;
 }
 
+
+
+
+
+void 
+pbsTest()
+{
+  int n = 5; 
+  //int ppid = getpid();
+  printf(1, "PBS SCHEDULE TEST\n");
+
+  int start = uptime();
+  for (int j = 1; j <= n; j++)
+  {
+    int pid = fork();
+    nice(pid, 10-j);
+    if (pid == 0)
+    {
+      for (int k = 1; k <= n; k++)
+      {
+
+        int s = 0;
+
+        if (k%2 ==0)
+          sleep(2*(j+(j%3)));
+        for (int i = 0; i < 1000000000*(10*(10-j)); i++)
+        {
+          for (int l = 0; l < (10*(6-j)); l++){
+            s = l * 214;
+            s++;
+          }
+        }
+        printf(1, "PID %d modification to  %d done\n", getpid(), k);
+      }
+
+      printf(1, "Process: PID %d :%d Finished\n", getpid(),j);
+
+      exit();
+
+    }
+
+  }
+
+  for (int j = 0; j < n+5; j++){
+      int rTime, sTime, cTime, eTime;
+      getStats(&rTime, &eTime, &cTime, &sTime);
+      printf(1, " ELAPSED TIME : %d, CTIME : %d, \n",  eTime, cTime);
+
+  }
+
+  int end = uptime();
+        printf(1, "THROUGHPUT : %d,", (end - start) / n );
+
+
+
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -1756,48 +1813,51 @@ main(int argc, char *argv[])
   }
   close(open("usertests.ran", O_CREATE));
 
-  argptest();
-  createdelete();
-  linkunlink();
-  concreate();
-  fourfiles();
-  sharedfd();
-
-  bigargtest();
-  bigwrite();
-  bigargtest();
-  bsstest();
-  sbrktest();
-  validatetest();
-
-  opentest();
-  writetest();
-  writetest1();
-  createtest();
-
-  openiputtest();
-  exitiputtest();
-  iputtest();
-
-  mem();
-  pipe1();
-  preempt();
-  exitwait();
-
-  rmdot();
-  fourteen();
-  bigfile();
-  subdir();
-  linktest();
-  unlinkread();
-  dirfile();
-  iref();
-  forktest();
-  bigdir(); // slow
+// argptest();
+// createdelete();
+// linkunlink();
+// concreate();
+// fourfiles();
+// sharedfd();
+//
+// bigargtest();
+// bigwrite();
+// bigargtest();
+// bsstest();
+// sbrktest();
+// validatetest();
+//
+// opentest();
+// writetest();
+// writetest1();
+// createtest();
+//
+// openiputtest();
+// exitiputtest();
+// iputtest();
+//
+// mem();
+// pipe1();
+// preempt();
+// exitwait();
+//
+// rmdot();
+// fourteen();
+// bigfile();
+// subdir();
+// linktest();
+// unlinkread();
+// dirfile();
+// iref();
+// forktest();
+//  bigdir(); // slow
 
   uio();
 
+  pbsTest();
+
   exectest();
 
+
   exit();
 }
diff --git a/usys.S b/usys.S
index 8bfd8a1..bcbff16 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(nice)
+SYSCALL(getStats)
