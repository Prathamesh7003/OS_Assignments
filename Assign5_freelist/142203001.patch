diff --git a/kalloc.c b/kalloc.c
index 14cd4f4..2501802 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -9,18 +9,16 @@
 #include "mmu.h"
 #include "spinlock.h"
 
+#define num_frame (PHYSTOP / PGSIZE)
+
 void freerange(void *vstart, void *vend);
 extern char end[]; // first address after kernel loaded from ELF file
                    // defined by the kernel linker script in kernel.ld
-
-struct run {
-  struct run *next;
-};
-
 struct {
   struct spinlock lock;
   int use_lock;
-  struct run *freelist;
+  char* frame[num_frame]; 
+  int num_free_frame; 
 } kmem;
 
 // Initialization happens in two phases.
@@ -28,16 +26,14 @@ struct {
 // the pages mapped by entrypgdir on free list.
 // 2. main() calls kinit2() with the rest of the physical pages
 // after installing a full page table that maps them on all cores.
-void
-kinit1(void *vstart, void *vend)
+void kinit1(void *vstart, void *vend)
 {
   initlock(&kmem.lock, "kmem");
   kmem.use_lock = 0;
   freerange(vstart, vend);
 }
 
-void
-kinit2(void *vstart, void *vend)
+void kinit2(void *vstart, void *vend)
 {
   freerange(vstart, vend);
   kmem.use_lock = 1;
@@ -56,22 +52,16 @@ freerange(void *vstart, void *vend)
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
 // initializing the allocator; see kinit above.)
-void
-kfree(char *v)
+void kfree(char *v)
 {
-  struct run *r;
-
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
-
   if(kmem.use_lock)
     acquire(&kmem.lock);
-  r = (struct run*)v;
-  r->next = kmem.freelist;
-  kmem.freelist = r;
+
+  kmem.frame[kmem.num_free_frame++] = v;
+
   if(kmem.use_lock)
     release(&kmem.lock);
 }
@@ -79,18 +69,18 @@ kfree(char *v)
 // Allocate one 4096-byte page of physical memory.
 // Returns a pointer that the kernel can use.
 // Returns 0 if the memory cannot be allocated.
-char*
-kalloc(void)
+char* kalloc(void)
 {
-  struct run *r;
+  char* frame = 0;
 
   if(kmem.use_lock)
     acquire(&kmem.lock);
-  r = kmem.freelist;
-  if(r)
-    kmem.freelist = r->next;
+
+  if (kmem.num_free_frame > 0) {
+    frame = kmem.frame[--kmem.num_free_frame];
+  }
   if(kmem.use_lock)
     release(&kmem.lock);
-  return (char*)r;
-}
 
+  return frame;
+}
